// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	"github.com/voidfiles/magda/src/models"
)

// CreateEntryHandlerFunc turns a function with the right signature into a create entry handler
type CreateEntryHandlerFunc func(CreateEntryParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateEntryHandlerFunc) Handle(params CreateEntryParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateEntryHandler interface for that can handle valid create entry params
type CreateEntryHandler interface {
	Handle(CreateEntryParams, interface{}) middleware.Responder
}

// NewCreateEntry creates a new http.Handler for the create entry operation
func NewCreateEntry(ctx *middleware.Context, handler CreateEntryHandler) *CreateEntry {
	return &CreateEntry{Context: ctx, Handler: handler}
}

/*CreateEntry swagger:route POST /entries createEntry

CreateEntry create entry API

*/
type CreateEntry struct {
	Context *middleware.Context
	Handler CreateEntryHandler
}

func (o *CreateEntry) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateEntryParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateEntryBody create entry body
// swagger:model CreateEntryBody
type CreateEntryBody struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// creators
	Creators []*CreatorsItems0 `json:"creators"`

	// description
	Description string `json:"description,omitempty"`

	// files
	Files []*FilesItems0 `json:"files"`

	// id
	ID string `json:"id,omitempty"`

	// kind
	// Enum: [quote image]
	Kind string `json:"kind,omitempty"`

	// published at
	PublishedAt string `json:"published_at,omitempty"`

	// source
	Source *CreateEntryParamsBodySource `json:"source,omitempty"`

	// titles
	Titles []string `json:"titles"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this create entry body
func (o *CreateEntryBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreators(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateEntryBody) validateCreators(formats strfmt.Registry) error {

	if swag.IsZero(o.Creators) { // not required
		return nil
	}

	for i := 0; i < len(o.Creators); i++ {
		if swag.IsZero(o.Creators[i]) { // not required
			continue
		}

		if o.Creators[i] != nil {
			if err := o.Creators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entry" + "." + "creators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateEntryBody) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(o.Files) { // not required
		return nil
	}

	for i := 0; i < len(o.Files); i++ {
		if swag.IsZero(o.Files[i]) { // not required
			continue
		}

		if o.Files[i] != nil {
			if err := o.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entry" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createEntryBodyTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["quote","image"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createEntryBodyTypeKindPropEnum = append(createEntryBodyTypeKindPropEnum, v)
	}
}

const (

	// CreateEntryBodyKindQuote captures enum value "quote"
	CreateEntryBodyKindQuote string = "quote"

	// CreateEntryBodyKindImage captures enum value "image"
	CreateEntryBodyKindImage string = "image"
)

// prop value enum
func (o *CreateEntryBody) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createEntryBodyTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CreateEntryBody) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(o.Kind) { // not required
		return nil
	}

	// value enum
	if err := o.validateKindEnum("entry"+"."+"kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

func (o *CreateEntryBody) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(o.Source) { // not required
		return nil
	}

	if o.Source != nil {
		if err := o.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entry" + "." + "source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateEntryBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateEntryBody) UnmarshalBinary(b []byte) error {
	var res CreateEntryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateEntryCreatedBody create entry created body
// swagger:model CreateEntryCreatedBody
type CreateEntryCreatedBody struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// creators
	Creators []*models.CreatorsItems0 `json:"creators"`

	// description
	Description string `json:"description,omitempty"`

	// files
	Files []*models.FilesItems0 `json:"files"`

	// id
	ID string `json:"id,omitempty"`

	// kind
	// Enum: [quote image]
	Kind string `json:"kind,omitempty"`

	// published at
	PublishedAt string `json:"published_at,omitempty"`

	// source
	Source *CreateEntryCreatedBodySource `json:"source,omitempty"`

	// titles
	Titles []string `json:"titles"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this create entry created body
func (o *CreateEntryCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreators(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateEntryCreatedBody) validateCreators(formats strfmt.Registry) error {

	if swag.IsZero(o.Creators) { // not required
		return nil
	}

	for i := 0; i < len(o.Creators); i++ {
		if swag.IsZero(o.Creators[i]) { // not required
			continue
		}

		if o.Creators[i] != nil {
			if err := o.Creators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createEntryCreated" + "." + "creators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateEntryCreatedBody) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(o.Files) { // not required
		return nil
	}

	for i := 0; i < len(o.Files); i++ {
		if swag.IsZero(o.Files[i]) { // not required
			continue
		}

		if o.Files[i] != nil {
			if err := o.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createEntryCreated" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createEntryCreatedBodyTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["quote","image"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createEntryCreatedBodyTypeKindPropEnum = append(createEntryCreatedBodyTypeKindPropEnum, v)
	}
}

const (

	// CreateEntryCreatedBodyKindQuote captures enum value "quote"
	CreateEntryCreatedBodyKindQuote string = "quote"

	// CreateEntryCreatedBodyKindImage captures enum value "image"
	CreateEntryCreatedBodyKindImage string = "image"
)

// prop value enum
func (o *CreateEntryCreatedBody) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createEntryCreatedBodyTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CreateEntryCreatedBody) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(o.Kind) { // not required
		return nil
	}

	// value enum
	if err := o.validateKindEnum("createEntryCreated"+"."+"kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

func (o *CreateEntryCreatedBody) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(o.Source) { // not required
		return nil
	}

	if o.Source != nil {
		if err := o.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createEntryCreated" + "." + "source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateEntryCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateEntryCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateEntryCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateEntryCreatedBodySource create entry created body source
// swagger:model CreateEntryCreatedBodySource
type CreateEntryCreatedBodySource struct {

	// entity
	Entity *CreateEntryCreatedBodySourceEntity `json:"entity,omitempty"`

	// titles
	Titles []string `json:"titles"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this create entry created body source
func (o *CreateEntryCreatedBodySource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateEntryCreatedBodySource) validateEntity(formats strfmt.Registry) error {

	if swag.IsZero(o.Entity) { // not required
		return nil
	}

	if o.Entity != nil {
		if err := o.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createEntryCreated" + "." + "source" + "." + "entity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateEntryCreatedBodySource) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateEntryCreatedBodySource) UnmarshalBinary(b []byte) error {
	var res CreateEntryCreatedBodySource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateEntryCreatedBodySourceEntity create entry created body source entity
// swagger:model CreateEntryCreatedBodySourceEntity
type CreateEntryCreatedBodySourceEntity struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// files
	Files []*CreateEntryCreatedBodySourceEntityFilesItems0 `json:"files"`

	// id
	ID string `json:"id,omitempty"`

	// kind
	// Enum: [person organization]
	Kind string `json:"kind,omitempty"`

	// names
	Names []string `json:"names"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// urls
	Urls []string `json:"urls"`
}

// Validate validates this create entry created body source entity
func (o *CreateEntryCreatedBodySourceEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateEntryCreatedBodySourceEntity) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(o.Files) { // not required
		return nil
	}

	for i := 0; i < len(o.Files); i++ {
		if swag.IsZero(o.Files[i]) { // not required
			continue
		}

		if o.Files[i] != nil {
			if err := o.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createEntryCreated" + "." + "source" + "." + "entity" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createEntryCreatedBodySourceEntityTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["person","organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createEntryCreatedBodySourceEntityTypeKindPropEnum = append(createEntryCreatedBodySourceEntityTypeKindPropEnum, v)
	}
}

const (

	// CreateEntryCreatedBodySourceEntityKindPerson captures enum value "person"
	CreateEntryCreatedBodySourceEntityKindPerson string = "person"

	// CreateEntryCreatedBodySourceEntityKindOrganization captures enum value "organization"
	CreateEntryCreatedBodySourceEntityKindOrganization string = "organization"
)

// prop value enum
func (o *CreateEntryCreatedBodySourceEntity) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createEntryCreatedBodySourceEntityTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CreateEntryCreatedBodySourceEntity) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(o.Kind) { // not required
		return nil
	}

	// value enum
	if err := o.validateKindEnum("createEntryCreated"+"."+"source"+"."+"entity"+"."+"kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateEntryCreatedBodySourceEntity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateEntryCreatedBodySourceEntity) UnmarshalBinary(b []byte) error {
	var res CreateEntryCreatedBodySourceEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateEntryCreatedBodySourceEntityFilesItems0 create entry created body source entity files items0
// swagger:model CreateEntryCreatedBodySourceEntityFilesItems0
type CreateEntryCreatedBodySourceEntityFilesItems0 struct {

	// content type
	ContentType string `json:"content_type,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// source url
	SourceURL string `json:"source_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// width
	Width int64 `json:"width,omitempty"`
}

// Validate validates this create entry created body source entity files items0
func (o *CreateEntryCreatedBodySourceEntityFilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateEntryCreatedBodySourceEntityFilesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateEntryCreatedBodySourceEntityFilesItems0) UnmarshalBinary(b []byte) error {
	var res CreateEntryCreatedBodySourceEntityFilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateEntryDefaultBody create entry default body
// swagger:model CreateEntryDefaultBody
type CreateEntryDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// message
	// Required: true
	Message string `json:"message"`
}

// Validate validates this create entry default body
func (o *CreateEntryDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateEntryDefaultBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.RequiredString("createEntry default"+"."+"message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateEntryDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateEntryDefaultBody) UnmarshalBinary(b []byte) error {
	var res CreateEntryDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateEntryParamsBodySource create entry params body source
// swagger:model CreateEntryParamsBodySource
type CreateEntryParamsBodySource struct {

	// entity
	Entity *CreateEntryParamsBodySourceEntity `json:"entity,omitempty"`

	// titles
	Titles []string `json:"titles"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this create entry params body source
func (o *CreateEntryParamsBodySource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateEntryParamsBodySource) validateEntity(formats strfmt.Registry) error {

	if swag.IsZero(o.Entity) { // not required
		return nil
	}

	if o.Entity != nil {
		if err := o.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entry" + "." + "source" + "." + "entity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateEntryParamsBodySource) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateEntryParamsBodySource) UnmarshalBinary(b []byte) error {
	var res CreateEntryParamsBodySource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateEntryParamsBodySourceEntity create entry params body source entity
// swagger:model CreateEntryParamsBodySourceEntity
type CreateEntryParamsBodySourceEntity struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// files
	Files []*CreateEntryParamsBodySourceEntityFilesItems0 `json:"files"`

	// id
	ID string `json:"id,omitempty"`

	// kind
	// Enum: [person organization]
	Kind string `json:"kind,omitempty"`

	// names
	Names []string `json:"names"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// urls
	Urls []string `json:"urls"`
}

// Validate validates this create entry params body source entity
func (o *CreateEntryParamsBodySourceEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateEntryParamsBodySourceEntity) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(o.Files) { // not required
		return nil
	}

	for i := 0; i < len(o.Files); i++ {
		if swag.IsZero(o.Files[i]) { // not required
			continue
		}

		if o.Files[i] != nil {
			if err := o.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entry" + "." + "source" + "." + "entity" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createEntryParamsBodySourceEntityTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["person","organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createEntryParamsBodySourceEntityTypeKindPropEnum = append(createEntryParamsBodySourceEntityTypeKindPropEnum, v)
	}
}

const (

	// CreateEntryParamsBodySourceEntityKindPerson captures enum value "person"
	CreateEntryParamsBodySourceEntityKindPerson string = "person"

	// CreateEntryParamsBodySourceEntityKindOrganization captures enum value "organization"
	CreateEntryParamsBodySourceEntityKindOrganization string = "organization"
)

// prop value enum
func (o *CreateEntryParamsBodySourceEntity) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createEntryParamsBodySourceEntityTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CreateEntryParamsBodySourceEntity) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(o.Kind) { // not required
		return nil
	}

	// value enum
	if err := o.validateKindEnum("entry"+"."+"source"+"."+"entity"+"."+"kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateEntryParamsBodySourceEntity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateEntryParamsBodySourceEntity) UnmarshalBinary(b []byte) error {
	var res CreateEntryParamsBodySourceEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateEntryParamsBodySourceEntityFilesItems0 create entry params body source entity files items0
// swagger:model CreateEntryParamsBodySourceEntityFilesItems0
type CreateEntryParamsBodySourceEntityFilesItems0 struct {

	// content type
	ContentType string `json:"content_type,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// source url
	SourceURL string `json:"source_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// width
	Width int64 `json:"width,omitempty"`
}

// Validate validates this create entry params body source entity files items0
func (o *CreateEntryParamsBodySourceEntityFilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateEntryParamsBodySourceEntityFilesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateEntryParamsBodySourceEntityFilesItems0) UnmarshalBinary(b []byte) error {
	var res CreateEntryParamsBodySourceEntityFilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreatorsItems0 creators items0
// swagger:model CreatorsItems0
type CreatorsItems0 struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// files
	Files []*models.CreatorsItems0FilesItems0 `json:"files"`

	// id
	ID string `json:"id,omitempty"`

	// kind
	// Enum: [person organization]
	Kind string `json:"kind,omitempty"`

	// names
	Names []string `json:"names"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// urls
	Urls []string `json:"urls"`
}

// Validate validates this creators items0
func (o *CreatorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatorsItems0) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(o.Files) { // not required
		return nil
	}

	for i := 0; i < len(o.Files); i++ {
		if swag.IsZero(o.Files[i]) { // not required
			continue
		}

		if o.Files[i] != nil {
			if err := o.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var creatorsItems0TypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["person","organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creatorsItems0TypeKindPropEnum = append(creatorsItems0TypeKindPropEnum, v)
	}
}

const (

	// CreatorsItems0KindPerson captures enum value "person"
	CreatorsItems0KindPerson string = "person"

	// CreatorsItems0KindOrganization captures enum value "organization"
	CreatorsItems0KindOrganization string = "organization"
)

// prop value enum
func (o *CreatorsItems0) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, creatorsItems0TypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CreatorsItems0) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(o.Kind) { // not required
		return nil
	}

	// value enum
	if err := o.validateKindEnum("kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatorsItems0) UnmarshalBinary(b []byte) error {
	var res CreatorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreatorsItems0FilesItems0 creators items0 files items0
// swagger:model CreatorsItems0FilesItems0
type CreatorsItems0FilesItems0 struct {

	// content type
	ContentType string `json:"content_type,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// source url
	SourceURL string `json:"source_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// width
	Width int64 `json:"width,omitempty"`
}

// Validate validates this creators items0 files items0
func (o *CreatorsItems0FilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatorsItems0FilesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatorsItems0FilesItems0) UnmarshalBinary(b []byte) error {
	var res CreatorsItems0FilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// FilesItems0 files items0
// swagger:model FilesItems0
type FilesItems0 struct {

	// content type
	ContentType string `json:"content_type,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// source url
	SourceURL string `json:"source_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// width
	Width int64 `json:"width,omitempty"`
}

// Validate validates this files items0
func (o *FilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FilesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FilesItems0) UnmarshalBinary(b []byte) error {
	var res FilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
