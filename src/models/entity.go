// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Entity entity
// swagger:model entity
type Entity struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// files
	Files []*EntityFilesItems0 `json:"files"`

	// id
	ID string `json:"id,omitempty"`

	// kind
	// Enum: [person organization]
	Kind string `json:"kind,omitempty"`

	// names
	Names []string `json:"names"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// urls
	Urls []string `json:"urls"`
}

// Validate validates this entity
func (m *Entity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Entity) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var entityTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["person","organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entityTypeKindPropEnum = append(entityTypeKindPropEnum, v)
	}
}

const (

	// EntityKindPerson captures enum value "person"
	EntityKindPerson string = "person"

	// EntityKindOrganization captures enum value "organization"
	EntityKindOrganization string = "organization"
)

// prop value enum
func (m *Entity) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, entityTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Entity) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Entity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Entity) UnmarshalBinary(b []byte) error {
	var res Entity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EntityFilesItems0 entity files items0
// swagger:model EntityFilesItems0
type EntityFilesItems0 struct {

	// content type
	ContentType string `json:"content_type,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// source url
	SourceURL string `json:"source_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// width
	Width int64 `json:"width,omitempty"`
}

// Validate validates this entity files items0
func (m *EntityFilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EntityFilesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityFilesItems0) UnmarshalBinary(b []byte) error {
	var res EntityFilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
