// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Entry interface {
	IsEntry()
}

// A file is a blob of bytes.
type File interface {
	IsFile()
}

type Dimensions struct {
	Width  *int `json:"width"`
	Height *int `json:"height"`
}

// An entity represents an Active thing ie a  person or organization.
type Entity struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	Websites    []*Website `json:"websites"`
	Images      []*Image   `json:"images"`
	CreatedAt   time.Time  `json:"createdAt"`
	UpdatedAt   time.Time  `json:"updatedAt"`
}

// An image is a file that you can display to a user.
type Image struct {
	ID string `json:"id"`
	// A URL where the user can download the bytes from. These URLs are timesensitve.
	URL string `json:"url"`
	// The content type of the bytes
	ContentType string `json:"contentType"`
	// A suggested name for this blob of bytes on disk.
	FileName   *string     `json:"fileName"`
	CreatedOn  time.Time   `json:"createdOn"`
	Dimensions *Dimensions `json:"dimensions"`
}

func (Image) IsFile() {}

type ImageEntry struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Description *string   `json:"description"`
	Image       *Image    `json:"image"`
	Source      *Source   `json:"source"`
	Creators    []*Entity `json:"creators"`
}

func (ImageEntry) IsEntry() {}

type Source struct {
	Page   *Website `json:"page"`
	Site   *Website `json:"site"`
	Entity *Entity  `json:"entity"`
}

// A source file is something that was, or will be, copied into the system. It's used to document provenance.
//
// It has one property which is a url which should be a URL the user can use to download the bytes from. The URLs are time sensitve.
type SourceFile struct {
	ID string `json:"id"`
	// url is a link to a canonical file
	URL string `json:"url"`
	// content_type is a guess at the files content_type
	ContentType string `json:"contentType"`
}

type TextEntry struct {
	ID       string    `json:"id"`
	Text     string    `json:"text"`
	Image    *Image    `json:"image"`
	Source   *Source   `json:"source"`
	Creators []*Entity `json:"creators"`
}

func (TextEntry) IsEntry() {}

// A website represents a page on the world wide web. It's rich text and a jumping off place for more information about something.
//
// Websites are notoriously temporary. The goal should be to hook into some kind of persistent identifier scheme.
//
// But, they are a nescesity. Things like homepages, and blogs of artists however temporary are important, but should be kept up to date.
type Website struct {
	ID          string      `json:"id"`
	URL         string      `json:"url"`
	Kind        WebsiteKind `json:"kind"`
	Title       *string     `json:"title"`
	Description *string     `json:"description"`
	CreatedAt   time.Time   `json:"createdAt"`
	UpdatedAt   time.Time   `json:"updatedAt"`
}

type WebsiteKind string

const (
	// site is the default website value
	WebsiteKindSite      WebsiteKind = "site"
	WebsiteKindWikimedia WebsiteKind = "wikimedia"
	WebsiteKindArtnet    WebsiteKind = "artnet"
	WebsiteKindArtsy     WebsiteKind = "artsy"
	// homepage is for the main online presence of an entity
	WebsiteKindHomepage WebsiteKind = "homepage"
)

var AllWebsiteKind = []WebsiteKind{
	WebsiteKindSite,
	WebsiteKindWikimedia,
	WebsiteKindArtnet,
	WebsiteKindArtsy,
	WebsiteKindHomepage,
}

func (e WebsiteKind) IsValid() bool {
	switch e {
	case WebsiteKindSite, WebsiteKindWikimedia, WebsiteKindArtnet, WebsiteKindArtsy, WebsiteKindHomepage:
		return true
	}
	return false
}

func (e WebsiteKind) String() string {
	return string(e)
}

func (e *WebsiteKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebsiteKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebsiteKind", str)
	}
	return nil
}

func (e WebsiteKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
